from picamera import PiCamera 
from datetime import datetime
from time import sleep 
import json
from constants import EXTERNAL_DRIVE
# from .sensors import readSensorData, writeSensorData
from sensors import Sensor
from logger import logger
from subsealight import PWM
from restart import reboot_camera
from main import get_camera_name

def capture_video(slot):
    resolution = slot["resolution"]
    framerate = slot["framerate"]
    iso = slot["iso"]
    exposure_mode = slot["exposure_mode"]
    exposure_compensation = slot["exposure_compensation"]
    light = slot["light"]
    sensor = Sensor()
    camera_name = get_camera_name()
    try: 
        with PiCamera(resolution=resolution, framerate=framerate, iso=iso, exposure_mode=exposure_mode, exposure_compensation=exposure_compensation) as camera:
            slot_name = slot["start"].replace(":","-") + "_" + slot["stop"].replace(":","-") + str(framerate) + '.h264'
            filename = f"{EXTERNAL_DRIVE}/{camera_name}_{slot_name}"
            PWM.switch_on(light)
            camera.start_recording(filename, format="h264")
            current_time = datetime.now() 
            sensor.write_sensor_data() 
            sensor_data = sensor.get_sensor_data()
            while current_time < datetime.strptime(slot["stop"], "%Y-%m-%d-%H:%M:%S"): 
                camera.annotate_text = f"{current_time.strftime('%Y-%m-%d %H:%M:%S')} @ {slot['framerate']} fps"
                sensor.write_sensor_data() 
                sensor_data = sensor.get_sensor_data()
                sleep(1)
                current_time = datetime.now() 
            camera.stop_recording() 
            PWM.switch_off()
    except Exception as err: 
        PWM.switch_off() 
        logger.error(err)
        reboot_camera()

def capture_images(slot):
    resolution = slot["resolution"]
    iso = slot["iso"]
    exposure_mode = slot["exposure_mode"]
    exposure_compensation = slot["exposure_compensation"]
    light = slot["light"]
    frequency = slot["frequency"]
    shutter_speed = slot["shutter_spped"]
    sensor = Sensor()
    camera_name = get_camera_name()
    try: 
        with PiCamera(resolution=resolution, iso=iso, exposure_mode=exposure_mode, exposure_compensation=exposure_compensation, shutter_speed=shutter_speed) as camera:
            PWM.switch_on(light)
            sensor.write_sensor_data() 
            sensor_data = sensor.get_sensor_data()
            sensor_data["camera_name"] = camera_name
            camera.exif_tags["IFDO.ImageDescription"] = json.dump(sensor_data)
            for f in camera.capture_continuous(f'{EXTERNAL_DRIVE}/{camera_name}_'+'img{timestamp:%Y-%m-%d-%H-%M-%S}.jpg', use_video_port=True):
                PWM.switch_off()
                currenttime = datetime.now()
                if currenttime < datetime.strptime(slot["stop"], "%Y-%m-%d-%H:%M:%S"):
                    sensor.write_sensor_data() 
                    sensor_data = sensor.get_sensor_data()
                    sensor_data["camera_name"] = camera_name
                    camera.exif_tags["IFDO.ImageDescription"] = json.dump(sensor_data)
                else: 
                    PWM.switch_off() 
                    break
    except Exception as err: 
        PWM.switch_off() 
        logger.error(err)
        reboot_camera()

def start_capture(slot):
    if slot["video"]:
        capture_video(slot)
    else:
        capture_images(slot)
